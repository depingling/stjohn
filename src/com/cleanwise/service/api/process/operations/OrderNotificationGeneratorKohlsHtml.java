package com.cleanwise.service.api.process.operations;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.Properties;

import javax.naming.NamingException;

import com.cleanwise.service.api.APIAccess;
import com.cleanwise.service.api.session.Order;
import com.cleanwise.service.api.session.PropertyService;
import com.cleanwise.service.api.util.RefCodeNames;
import com.cleanwise.service.api.value.AddressInfoView;
import com.cleanwise.service.api.value.ItemInfoView;
import com.cleanwise.service.api.value.ItemInfoViewVector;
import com.cleanwise.service.api.value.OrderData;
import com.cleanwise.service.api.value.OrderInfoDataView;
import com.cleanwise.service.api.value.OrderInfoView;
import com.cleanwise.service.api.value.OrderPropertyData;
import com.cleanwise.service.api.value.OrderPropertyDataVector;

/* This is base e-mail generator class for Kohls and it can be used as
/* Generator for Kohls Order Approved Notificaton E-mail
/*  If e-mail should be generated by this class it name (with it's package) must be
/*  defined as property value for the property code = "NOTIFY_ORDER_EMAIL_GENERATOR"
*/

public class OrderNotificationGeneratorKohlsHtml extends OrderNotificationGeneratorBase implements FileGenerator {

    private static final String className = "OrderNotificationGeneratorKohlsHtml";

    public static final String APPROVAL = "Order Approval Needed Notification";
    public static final String APPROVED = "Order Approved Notification";
    public static final String REJECTED = "Order Rejected Notification";
    public static final String CONFIRM = "Order Confirmation Notification";

    private String subNote = "to inform you this order has been approved.";
    private String title = APPROVED;

    private static final String sRIGHT = "right";
    private static final String sLEFT = "left";
    private static final String sCENTER= "center";
    private static final String colWIDTH1 = "130";
    private static final String colWIDTH2 = "290";
    private static final String colWIDTH3 = "420";

    private static final String colWIDTH41 = "57";
    private static final String colWIDTH42 = "57";
    private static final String colWIDTH43 = "125";
    private static final String colWIDTH44 = "351";
    private static final String colWIDTH45 = "125";
    private static final String colWIDTH4  = "125";
    private static final String SPACING = "&nbsp;&nbsp;&nbsp;";
    private BigDecimal orderServiceFee = null;

    public OrderNotificationGeneratorKohlsHtml(){
    	fileType = FileGenerator.HTML_FILE;
    }
    
    public String genTXT(OrderData orderData) {
      OrderInfoDataView data = null;
      try {
        data = getData(orderData.getOrderId());
      }
      catch (Exception e) {
        e.printStackTrace();
      }
      return super.genTXT(data);
    }

    public String genTXT(OrderInfoDataView data) {
      orderServiceFee = new BigDecimal(0);
      defineUserLocale(data);
      return super.genTXT(data);
   }

   public void writeHeaderTXT(StringBuffer sb, OrderInfoDataView orderInfo) {
     writeHeaderTXT( sb, orderInfo, subNote, title) ;
   }

    public void writeHeaderTXT(StringBuffer sb, OrderInfoDataView orderInfo, String subNote, String title) {

        writeHtmlHeader(sb, title);
        addLine(sb, "<tr>");
        addLine(sb, "<td>");
        if(title.equalsIgnoreCase("REJECTED")){
        	addLine(sb, "<p>This email is " + subNote + ".");
        }else{
        	addLine(sb, "<p>This email is " + subNote + " Please review all of the information to make sure the order is correct.");
        }
        addLine(sb, "<p>PLEASE DO NOT RESPOND TO THIS MESSAGE. THIS IS AN AUTOMATED MESSAGE AND THE ORIGINATING EMAIL ADDRESS IS NOT MONITORED");
        addLine(sb, "<p>&nbsp;</td>");
        addLine(sb, "</tr>");

        addLine(sb, "<tr>");
        addLine(sb, "<td style=\"border-top:1px solid #000000; padding-top: 1px;; padding-bottom: 1px; padding-left:4px; padding-right:4px\" height=\"209\">");

        writeAddressInfo(sb, orderInfo.getOrderInfo(), orderInfo.getShippingAddress());
        addLine(sb, "<p>&nbsp;</p>");
        writeComments(sb, orderInfo.getOrderInfo(), orderInfo.getInternalComments());
        addLine(sb, "<p>&nbsp;</td>");
	addLine(sb, "</tr>");
   }


    public void writeBodyTXT(StringBuffer sb, ItemInfoViewVector items) {

      addLine(sb, "<tr>");
      addLine(sb, "<td style=\" border-top:1px solid #000000; padding-top: 1px;; padding-bottom: 1px; padding-left:4px; padding-right:4px\">");

      addLine(sb, "<table border=\"0\" width=\"840\" id=\"table6\">");
      addLine(sb, "<tr>");
      addLine(sb,writeElement("Order<br>Qty", colWIDTH41, sCENTER));
      addLine(sb,writeElement("UOM", colWIDTH42, sCENTER));
      addLine(sb,writeElement("Item#", colWIDTH43, sCENTER));
      addLine(sb,writeElement("Product Name", colWIDTH44, sCENTER));
      addLine(sb,writeElement("Price", colWIDTH45, sRIGHT));
      addLine(sb,writeElement("Total", colWIDTH4, sRIGHT));
      addLine(sb, "</tr>");
      addLine(sb, "</table>");
      addLine(sb, "</td>");
      addLine(sb, "</tr>");

      addLine(sb, "<tr>");
      addLine(sb, "<td style=\"border-top:1px solid #000000; border-bottom:1px solid #000000; padding-left: 4px; padding-right: 4px; padding-top: 1px; padding-bottom: 1px\">");

      addLine(sb, "<table border=\"0\" width=\"840\" id=\"table3\">");
      
      if (items != null) {
        Iterator it = items.iterator();
        while (it.hasNext()) {
          ItemInfoView item = (ItemInfoView) it.next();
          BigDecimal serviceFee = item.getServiceFee();
          BigDecimal itemCost = getActualCost(item);
          if(serviceFee!=null && itemCost!=null) {
             itemCost = itemCost.subtract(serviceFee);
             orderServiceFee = orderServiceFee.add(item.getQty().multiply(serviceFee));
          }
          String priceS = getCurrencyValue(itemCost);
          BigDecimal total = item.getQty().multiply(itemCost);
          String totalS = getCurrencyValue(total);

          addLine(sb, "<tr>");
          addLine(sb,writeElement(item.getQty().toString(), colWIDTH41, sCENTER));
          addLine(sb,writeElement(item.getUom(), colWIDTH42, sCENTER));
          addLine(sb,writeElement(getActualSkuNum(item), colWIDTH43, sCENTER));
          addLine(sb,writeElement(item.getItemName(), colWIDTH44, sCENTER));
          addLine(sb,writeElement(priceS, colWIDTH45, sRIGHT));
          addLine(sb,writeElement(totalS, colWIDTH4, sRIGHT));
          addLine(sb, "</tr>");
         }
      }
      addLine(sb, "</table>");
      addLine(sb, "</td>");
      addLine(sb, "</tr>");

    }


    public void writeFooterTXT(StringBuffer sb, OrderInfoDataView orderInfo) {
        writeSummaryInfo(sb,orderInfo.getOrderInfo());
        writeHtmlFooter(sb);
    }
//=======================================================================================================//
    protected void writeAddressInfo(StringBuffer sb,OrderInfoView orderInfo, AddressInfoView shippingAddress) {
      addLine(sb,"<table border=\"0\" width=\"840\" id=\"table1\" cellspacing=\"0\" cellpadding=\"0\">");
      addLine(sb,"<tr>");
      addLine(sb,writeElement("<b>Order Information:</b>", colWIDTH3, sLEFT, "2"));
      addLine(sb,writeElement("<b>Shipping Information:</b>", colWIDTH3, sLEFT, "2"));
      addLine(sb,"</tr>");
      addLine(sb,"<tr>");
      addLine(sb,writeElement("Order #:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(orderInfo.getOrderNum(), colWIDTH2, sLEFT));
      addLine(sb,writeElement("Location:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(orderInfo.getOrderSiteName(), colWIDTH2, sLEFT));
      addLine(sb,"</tr>");
      addLine(sb,"<tr>");
      SimpleDateFormat fmt = new SimpleDateFormat("MM/dd/yyyy") ;
      String dateS = fmt.format(orderInfo.getOrderDate());
      addLine(sb,writeElement("Order Date:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(dateS, colWIDTH2, sLEFT));
      addLine(sb,writeElement("Address 1:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(shippingAddress.getAddress1(), colWIDTH2, sLEFT));
      addLine(sb,"</tr>");
      addLine(sb,"<tr>");
      String statusS = getOrderStatus(orderInfo.getOrderStatusCd());
      addLine(sb,writeElement("Order&nbsp;Status:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(statusS, colWIDTH2, sLEFT));
      addLine(sb,writeElement("Address 2:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(shippingAddress.getAddress2(), colWIDTH2, sLEFT));      
      addLine(sb,"</tr>");
      addLine(sb,"<tr>");
      addLine(sb,writeElement("Order&nbsp;Type:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(orderInfo.getSource(), colWIDTH2, sLEFT));
      addLine(sb,writeElement("Address 3:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(shippingAddress.getAddress3(), colWIDTH2, sLEFT));      
      addLine(sb,"</tr>");
      addLine(sb,"<tr>");
      String poS = (orderInfo.getPoNumber()!=null) ? orderInfo.getPoNumber() : " ";
      addLine(sb,writeElement("PO #:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(poS, colWIDTH2, sLEFT));
      addLine(sb,writeElement("City:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(shippingAddress.getCity(), colWIDTH2, sLEFT));      
      addLine(sb,"</tr>");
      addLine(sb,"<tr>");
      addLine(sb,writeElement("Placed&nbsp;By:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(orderInfo.getPlacedBy(), colWIDTH2, sLEFT));
      addLine(sb,writeElement("State/Province:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(shippingAddress.getStateProvinceCd(), colWIDTH2, sLEFT));      
      addLine(sb,"</tr>");
      
      addLine(sb,"<tr>");
      addLine(sb,writeElement("&nbsp;", colWIDTH1, sRIGHT));
      addLine(sb,writeElement("&nbsp;", colWIDTH2, sLEFT));
      addLine(sb,writeElement("Zip/Postal:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(shippingAddress.getPostalCode(), colWIDTH2, sLEFT));      
      addLine(sb,"</tr>");
      addLine(sb,"<tr>");
      addLine(sb,writeElement("&nbsp;", colWIDTH1, sRIGHT));
      addLine(sb,writeElement("&nbsp;", colWIDTH2, sLEFT));
      addLine(sb,writeElement("Country:", colWIDTH1, sRIGHT));
      addLine(sb,writeElement(shippingAddress.getCountry(), colWIDTH2, sLEFT));      
      addLine(sb,"</tr>");
      addLine(sb,"</table>");
    }

    protected void writeComments(StringBuffer sb,OrderInfoView orderInfo, OrderPropertyDataVector internalComments) {

      addLine(sb,"<table border=\"0\" width=\"840\" id=\"table5\">");
      addLine(sb,"<tr>");
      addLine(sb,writeElement("<b>Internal Comments:</b>", colWIDTH3, sLEFT));
      addLine(sb,writeElement("<b>Shipping Comments:</b>", colWIDTH3, sLEFT));
      addLine(sb,"</tr>");

      if (internalComments == null || internalComments.size()==0){
        addLine(sb,"<tr>");
        addLine(sb,writeElement(" ", colWIDTH3, sLEFT));
        if(orderInfo.getComments()!=null){
        	addLine(sb,writeElement(orderInfo.getComments(), colWIDTH3, sLEFT));
        }else{
        	addLine(sb,writeElement(" ", colWIDTH3, sLEFT));
        }
        addLine(sb,"</tr>");
      } else {
        for (int i = 0; i < internalComments.size(); i++) {
          OrderPropertyData opd = (OrderPropertyData) internalComments.get(i);
          SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd k:mm");
          String iComment = fmt.format(opd.getAddDate()) + " " + opd.getAddBy() + " " + opd.getValue();

          addLine(sb,"<tr>");
          addLine(sb,writeElement(iComment, colWIDTH3, sLEFT));
          if (i == 0) {
            addLine(sb,writeElement(orderInfo.getComments(), colWIDTH3, sLEFT));
          }
          addLine(sb,"</tr>");

        }
      }
      addLine(sb,"</table>");

    }


    protected void writeSummaryInfo(StringBuffer sb, OrderInfoView orderInfo) {
    	BigDecimal subtotal = orderInfo.getSubtotal();
    	if (orderServiceFee.doubleValue() > 0.0){
    		subtotal = subtotal.subtract(orderServiceFee);
    		subtotal = subtotal.setScale(2, BigDecimal.ROUND_HALF_UP);
    	}
        
      String subtotalS = getCurrencyValue( subtotal);
      String miscChargeS = getCurrencyValue(orderInfo.getMiscCharge());
      String freightS = getCurrencyValue(orderInfo.getFreight());
      String taxS = getCurrencyValue(orderInfo.getTax());

        BigDecimal total = orderInfo.getToatal();

      BigDecimal discount = orderInfo.getDiscount();
      String discountS = null;
      if (discount != null && discount.doubleValue() != 0) {
          discountS = getCurrencyValue(discount);
          total = total.add(discount);
      }

      String toatelS = getCurrencyValue(total);


      addLine(sb,"<tr>");
      addLine(sb,"<td>");
      addLine(sb," <table border=\"0\" width=\"427\" align=\"right\" id=\"table4\">");
      addLine(sb,"<tr>");
      addLine(sb,writeElement("<b>Sub Total:</b>", null, sRIGHT));
      addLine(sb,writeElement(subtotalS, colWIDTH4, sRIGHT));
      addLine(sb,"</tr>");
      if (orderServiceFee.doubleValue() > 0.0){
    	  String serviceFeeTotalS = getCurrencyValue( orderServiceFee);
    	  addLine(sb,"<tr>");
          addLine(sb,writeElement("<b>Service Fee:</b>", null, sRIGHT));
          addLine(sb,writeElement(serviceFeeTotalS, colWIDTH4, sRIGHT));
          addLine(sb,"</tr>");
      }
      addLine(sb,"<tr>");
      addLine(sb,writeElement("<b>Handling:</b>", null, sRIGHT));
      addLine(sb,writeElement(miscChargeS, colWIDTH4, sRIGHT));
      addLine(sb,"</tr>");
      addLine(sb,"<tr>");
      addLine(sb,writeElement("<b>Estimated Freight</b>(Standard):", null, sRIGHT));
      addLine(sb,writeElement(freightS, colWIDTH4, sRIGHT));
      addLine(sb,"</tr>");
      addLine(sb,"<tr>");
      addLine(sb,writeElement("<b>Tax:</b>", null, sRIGHT));
      addLine(sb,writeElement(taxS, colWIDTH4, sRIGHT));
      addLine(sb,"</tr>");

      if (discountS != null) {
          addLine(sb,"<tr>");
          addLine(sb,writeElement("<b>Discount:</b>", null, sRIGHT));
          addLine(sb,writeElement(discountS, colWIDTH4, sRIGHT));
          addLine(sb,"</tr>");
      }

      addLine(sb," <tr>");
      addLine(sb,writeElement("<b>Grand Total:</b>", null, sRIGHT));
      addLine(sb,writeElement(toatelS, colWIDTH4, sRIGHT));
      addLine(sb,"</tr>");
      addLine(sb,"</table>");
      addLine(sb,"</td>");
      addLine(sb,"</tr>");

    }

  private void writeHtmlHeader(StringBuffer sb, String title) {
    addLine(sb,"<html>");
    addLine(sb, "<head>");
    addLine(sb, "<style>");
    addLine(sb, "</style>");
    addLine(sb, "<meta http-equiv=\"Content-Language\" content=\"en-us\">");
    addLine(sb, "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1252\">");
//    addLine(sb, "<title>" + title + "</title>");
    addLine(sb, "</head>");
    addLine(sb, "<body>");
    addLine(sb, "<p>" + SPACING + "</p>");
    addLine(sb, "<table border=\"0\" width=\"840\" id=\"table1\" cellspacing=\"0\" cellpadding=\"0\">");
  }

  private void writeHtmlFooter(StringBuffer sb) {

    addLine(sb,"</table>");
    addLine(sb,"</body>");
    addLine(sb,"</html>");

  }
  private void addLine( StringBuffer sb, String val){
    line.append(val);
    nextLine(sb);
  }

  private String writeElement(String val, String width, String align){
    return writeElement(val,  width,  align,  null);
  }

  private String writeElement(String val, String width, String align, String colspan){
	if (val == null)
		val = "";
    String widthS = (width != null ) ? "width="+ width +" " : "";
    String alignS = (align != null ) ? "align="+ align +" " : "";
    String colspanS = (colspan != null ) ? "colspan="+ colspan +" " : "";

    return "<td "+ widthS + alignS + colspanS + ">" + val + "</td>";
  }
  
  public String getSubject(Object data){
	  return getSubject(data, APPROVED);
    }
  
  public String getSubject(Object data, String notificationTitle){
	  String webAddress = "Orderline.xpedx.com";	  

	  if (data instanceof OrderInfoDataView) {
		  OrderInfoDataView oidv = (OrderInfoDataView) data;
		  
		  try {
			  int storeId = oidv.getOrderInfo().getStoreId();
			  PropertyService propertyService = APIAccess.getAPIAccess().getPropertyServiceAPI();
			  webAddress = propertyService.getBusEntityProperty(storeId, RefCodeNames.PROPERTY_TYPE_CD.STORE_PRIMARY_WEB_ADDRESS);			  		  
		  } catch (Exception e) {
			  e.printStackTrace();
		  }
		  String subject = webAddress + ": " + notificationTitle;
		  subject += " - " + oidv.getOrderInfo().getOrderSiteName();
		  subject += "; Order # " + oidv.getOrderInfo().getOrderNum();
		  return subject;
	  }else{
		  return webAddress + ": " + notificationTitle;
	  }
  }
  
  public static void main (String argv[]) {   //for test
	  try {
		  //OrderNotificationGeneratorKohlsHtml generator = new OrderNotificationGeneratorKohlsHtml();
		  OrderNotificationGeneratorKohlsC generator = new OrderNotificationGeneratorKohlsC();
		  generator.getAPIAccess();
		  //generator.generate(new Integer(1354358),"c:\\temp\\order_");
		  Order orderEjb = APIAccess.getAPIAccess().getOrderAPI();
		  OrderInfoDataView orderInfoData = orderEjb.getOrderInfoData(new Integer(145196));
		  generator.generate(orderInfoData, new File("c:\\temp\\order_"));

	  } catch (Exception e) {
		  e.printStackTrace();
	  }
  }

  protected APIAccess getAPIAccess() throws IOException, NamingException{
      Properties props = loadConfiguration();
      return getAPIAccess(props);
  }
  protected static APIAccess getAPIAccess(Properties props) throws IOException, NamingException{
      Enumeration en = props.propertyNames();
      while(en.hasMoreElements()){
          String key = (String) en.nextElement();
          System.setProperty(key,props.getProperty(key));
      }
      return new APIAccess();
  }
  
  protected static Properties loadConfiguration() throws IOException {
      Properties installation = new Properties();
      String conf = System.getProperty("conf");
      if(conf == null){
          installation.load(new FileInputStream("installation.properties"));
      }else{
          installation.load(new FileInputStream(conf));
      }
      return installation;
  }
  
  
}

