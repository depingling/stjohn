package com.cleanwise.service.api.process.operations;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;

import com.cleanwise.service.api.util.Utility;
import com.cleanwise.service.api.value.AddressInfoView;
import com.cleanwise.service.api.value.ItemInfoView;
import com.cleanwise.service.api.value.ItemInfoViewVector;
import com.cleanwise.service.api.value.OrderData;
import com.cleanwise.service.api.value.OrderInfoDataView;
import com.cleanwise.service.api.value.OrderInfoView;
import com.cleanwise.service.api.value.OrderPropertyData;
import com.cleanwise.service.api.value.OrderPropertyDataVector;
import com.cleanwise.service.api.value.PairView;
import com.cleanwise.service.api.value.PairViewVector;

/* This is base e-mail generator class for Kohls and it can be used as
/* Generator for Kohls Order Approved Notificaton E-mail
/*  If e-mail should be generated by this class it name (with it's package) must be
/*  defined as property value for the property code = "APPROVED_ORDER_EMAIL_GENERATOR"
*/

public class OrderNotificationGeneratorKohls extends OrderNotificationGeneratorBase implements FileGenerator {

    public static final String APPROVAL = "Order Approval Needed Notification";
    public static final String APPROVED = "Order Approved Notification";
    public static final String REJECTED = "Order Rejected Notification";
    public static final String CONFIRM = "Order Confirmation Notification";

    private String subNote = "to inform you this order has been approved.";
    private String title = APPROVED;


    public String genTXT(OrderData orderData) {
       OrderInfoDataView data= null;
       try {
            data = getData(orderData.getOrderId());

       }  catch (Exception e) {
            e.printStackTrace();
       }
       return super.genTXT(data);
//         StringBuffer sb = new StringBuffer();
//         writeHeaderTXT(sb,data);
//         writeBodyTXT(sb,data.getItems());
//         writeFooterTXT(sb,data);
//         return sb.toString();
     }

   public String genTXT(OrderInfoDataView data) {
     defineUserLocale(data);
 //    StringBuffer sb = new StringBuffer();
 //    writeHeaderTXT(sb, data);
 //    writeBodyTXT(sb, data.getItems());
 //    writeFooterTXT(sb, data);
 //    return sb.toString();
     return super.genTXT(data);
   }
   public void writeHeaderTXT(StringBuffer sb, OrderInfoDataView orderInfo) {
     writeHeaderTXT( sb, orderInfo, subNote, title) ;
   }
   public void writeHeaderTXT(StringBuffer sb, OrderInfoDataView orderInfo, String subNote, String title) {
        nextLine(sb);
        //nextLine(sb);
//        String title = APPROVED;
//        String subNote = " has been approved.";

        //line.append(align(title, CENTER));
        //nextLine(sb);
        //nextLine(sb);
        line.append(align("This email is " + subNote +" Please review all of the information to make sure the order is correct.", LEFT));
        nextLine(sb);
        nextLine(sb);
        line.append(align("PLEASE DO NOT RESPOND TO THIS MESSAGE. THIS IS AN AUTOMATED MESSAGE AND THE ORIGINATING EMAIL ADDRESS IS NOT MONITORED", LEFT));
        nextLine(sb);
        line.append(getCharLine('=',DOC_LENGTH));

        writeAddressInfo(sb,orderInfo.getOrderInfo(),orderInfo.getShippingAddress());
        writeComments(sb,orderInfo.getOrderInfo(),orderInfo.getInternalComments());
    }


    public void writeBodyTXT(StringBuffer sb, ItemInfoViewVector items) {
        //NumberFormat currFmt = getCurrencyFormat();
        String headerTable = "";

        line.append(getCharLine('_',DOC_LENGTH));
        nextLine(sb);
        nextLine(sb);

//        headerTable += normalizeString("Pack",' ',5,CENTER);
        headerTable += normalizeString("Order\r\nQty",' ',16,CENTER);
        headerTable += normalizeString("UOM",' ',7,CENTER);
        headerTable += normalizeString("Item#",' ',11,LEFT);
        headerTable += normalizeString("Product Name",' ',20,LEFT);
        headerTable += normalizeString("Price",' ',9,RIGTH);
        headerTable += normalizeString("Total",' ',12,RIGTH);

        line.append(align(headerTable,CENTER));
        nextLine(sb);

        line.append(getCharLine('_',DOC_LENGTH));
        nextLine(sb);
        nextLine(sb);

        PairViewVector columnParam=new PairViewVector();

        columnParam.add(new PairView(new Integer(6), new Integer(LEFT)));
        columnParam.add(new PairView(new Integer(5), new Integer(CENTER)));
        columnParam.add(new PairView(new Integer(9), new Integer(LEFT)));
        columnParam.add(new PairView(new Integer(20), new Integer(LEFT)));
        columnParam.add(new PairView(new Integer(9), new Integer(RIGTH)));
//        columnParam.add(new PairView(new Integer(5), new Integer(CENTER)));
        columnParam.add(new PairView(new Integer(12), new Integer(RIGTH)));
        if (items != null) {
          Iterator it = items.iterator();
          while (it.hasNext()) {
            ItemInfoView item = (ItemInfoView) it.next();
            ArrayList colsArray = new ArrayList();
            ArrayList itemNameAL = parseDelim(item.getItemName(), " ",
                                              20 - TABLE_COLUMN_SPACE);
      //            colsArray.add(parseDelim(item.getPack()," ", 5-TABLE_COLUMN_SPACE));
            colsArray.add(parseDelim(item.getQty().toString(), null,
                                     6 - TABLE_COLUMN_SPACE));
            colsArray.add(parseDelim(item.getUom(), null, 5 - TABLE_COLUMN_SPACE));
            colsArray.add(parseDelim(getActualSkuNum(item), " ", 10 - TABLE_COLUMN_SPACE));
            colsArray.add(itemNameAL);

            BigDecimal itemCost = getActualCost(item);
            String priceS = getCurrencyValue(itemCost); 

            colsArray.add(parseDelim(priceS, null,10 - TABLE_COLUMN_SPACE));

            BigDecimal total = item.getQty().multiply(itemCost);
            //String totalS = currFmt.format(total);
            String totalS = getCurrencyValue(total);
            colsArray.add(parseDelim(totalS, null, 12 - TABLE_COLUMN_SPACE));

            writeArrayAsTableStyle(colsArray, sb, columnParam, CENTER);

            nextLine(sb);
          }
        }
        line.append(getCharLine('_',DOC_LENGTH));
        nextLine(sb);
    }


    public void writeFooterTXT(StringBuffer sb, OrderInfoDataView orderInfo) {
        writeSummaryInfo(sb,orderInfo.getOrderInfo());
    }

    protected void writeAddressInfo(StringBuffer sb,OrderInfoView orderInfo, AddressInfoView shippingAddress) {
      String headerTable = "";
        nextLine(sb);
        nextLine(sb);
        headerTable += normalizeString("Order Information:", ' ', DOC_LENGTH/2, LEFT);
        headerTable += normalizeString("Shipping Information:",' ',DOC_LENGTH/2,LEFT);

        line.append(align(headerTable,CENTER));
        nextLine(sb);
        nextLine(sb);
        ArrayList colsArray = new ArrayList();
        PairViewVector columnParam=new PairViewVector();
        columnParam.add(new PairView(new Integer(DOC_LENGTH/2-TABLE_COLUMN_SPACE), new Integer(LEFT)));
        columnParam.add(new PairView(new Integer(DOC_LENGTH/2-TABLE_COLUMN_SPACE), new Integer(LEFT)));
        colsArray.add(parseDelim("Order #: " + orderInfo.getOrderNum()," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        colsArray.add(parseDelim("Location: "+ ((Utility.isSet(orderInfo.getOrderSiteName())) ? orderInfo.getOrderSiteName() : "")/*shippingAddress.getAccountErpNum()*/," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        writeArrayAsTableStyle(colsArray,sb,columnParam,LEFT);
        colsArray.clear();
        SimpleDateFormat fmt = new SimpleDateFormat("MM/dd/yyyy") ;
        String dateS = fmt.format(orderInfo.getOrderDate());
        colsArray.add(parseDelim("Order Date: " + dateS," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        colsArray.add(parseDelim("Address 1: " + ((Utility.isSet(shippingAddress.getAddress1())) ? shippingAddress.getAddress1() : "")," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        writeArrayAsTableStyle(colsArray,sb,columnParam,LEFT);
        colsArray.clear();

       // String status = com.cleanwise.view.utils.ShopTool.xlateStatus(orderInfo.getOrderStatusCd(),false,false,false);
        String statusS = getOrderStatus(orderInfo.getOrderStatusCd());
        colsArray.add(parseDelim("Order Status: " + statusS," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        colsArray.add(parseDelim("Address 2: " + ((Utility.isSet(shippingAddress.getAddress2())) ? shippingAddress.getAddress2() : "")," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        writeArrayAsTableStyle(colsArray,sb,columnParam,LEFT);
        colsArray.clear();

        colsArray.add(parseDelim("Order Type: " + orderInfo.getSource()," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        colsArray.add(parseDelim("Address 3: " + ((Utility.isSet(shippingAddress.getAddress3())) ? shippingAddress.getAddress3() : "")," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        writeArrayAsTableStyle(colsArray,sb,columnParam,LEFT);
        colsArray.clear();

        String poS = (orderInfo.getPoNumber()!=null) ? orderInfo.getPoNumber() : " ";
        colsArray.add(parseDelim("PO #: "+ poS," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        colsArray.add(parseDelim("City: " + ((Utility.isSet(shippingAddress.getCity())) ? shippingAddress.getCity() : "")," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        writeArrayAsTableStyle(colsArray,sb,columnParam,LEFT);
        colsArray.clear();

        colsArray.add(parseDelim("Placed By: " + orderInfo.getPlacedBy()," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        colsArray.add(parseDelim("State/Province: " + ((Utility.isSet(shippingAddress.getStateProvinceCd())) ? shippingAddress.getStateProvinceCd() : "")," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        writeArrayAsTableStyle(colsArray,sb,columnParam,LEFT);
        colsArray.clear();

        colsArray.add(parseDelim(" "," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        colsArray.add(parseDelim("Zip/Postal:" + ((Utility.isSet(shippingAddress.getPostalCode())) ? shippingAddress.getPostalCode() : "")," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        writeArrayAsTableStyle(colsArray,sb,columnParam,LEFT);
        colsArray.clear();

        colsArray.add(parseDelim(" "," ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        colsArray.add(parseDelim("Country:" + ((Utility.isSet(shippingAddress.getCountry())) ? shippingAddress.getCountry() : ""), " ", DOC_LENGTH/2-TABLE_COLUMN_SPACE));
        writeArrayAsTableStyle(colsArray,sb,columnParam,LEFT);
        colsArray.clear();

        nextLine(sb);
        nextLine(sb);
    }
    protected void writeComments(StringBuffer sb,OrderInfoView orderInfo, OrderPropertyDataVector internalComments) {

        String headerTable = "";
        nextLine(sb);
        nextLine(sb);
        headerTable += normalizeString("Internal Comments: ", ' ', DOC_LENGTH/2, LEFT);
        headerTable += normalizeString("Shipping Comments: ", ' ', DOC_LENGTH/2,LEFT);

        line.append(align(headerTable,LEFT));
        //nextLine(sb);
        nextLine(sb);
        ArrayList colsArray = null;
        PairViewVector columnParam=new PairViewVector();
        columnParam.add(new PairView(new Integer(DOC_LENGTH/2-TABLE_COLUMN_SPACE), new Integer(LEFT)));
        columnParam.add(new PairView(new Integer(DOC_LENGTH/2-TABLE_COLUMN_SPACE), new Integer(LEFT)));
        if (internalComments == null || internalComments.size()==0){
          colsArray = new ArrayList();
          colsArray.add(parseDelim(" ", null, DOC_LENGTH / 2 - TABLE_COLUMN_SPACE));
          colsArray.add(parseDelim(orderInfo.getComments(), " ", DOC_LENGTH / 2 - TABLE_COLUMN_SPACE));
          writeArrayAsTableStyle(colsArray,sb,columnParam,LEFT);
          nextLine(sb);
        } else {
          for (int i = 0; i < internalComments.size(); i++) {
            colsArray = new ArrayList();
            OrderPropertyData opd = (OrderPropertyData) internalComments.get(i);
            SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd k:mm");
            String iComment = fmt.format(opd.getAddDate()) + " " + opd.getAddBy() +
                " " + opd.getValue();
            colsArray.add(parseDelim(iComment, " ",DOC_LENGTH / 2 - TABLE_COLUMN_SPACE));
            if (i == 0) {
              colsArray.add(parseDelim(orderInfo.getComments(), " ",DOC_LENGTH / 2 - TABLE_COLUMN_SPACE));
            }
            writeArrayAsTableStyle(colsArray,sb,columnParam,LEFT);
            nextLine(sb);
          }
        }
        colsArray.clear();
        nextLine(sb);
    }


    protected void writeSummaryInfo(StringBuffer sb, OrderInfoView orderInfo) {
        nextLine(sb);
        int maxLenPh = "Estimated Freight(Standard): ".length();
        int maxDigitinLine=12;

//        NumberFormat currFmt =  getCurrencyFormat();
//      String subtotalS = currFmt.format(orderInfo.getSubtotal());//orderInfo.getSubtotal().toString();
//      String miscChargeS = currFmt.format(orderInfo.getMiscCharge());//orderInfo.getMiscCharge().toString();
//      String freightS = currFmt.format(orderInfo.getFreight());//orderInfo.getFreight().toString();
//      String taxS = currFmt.format(orderInfo.getTax());//orderInfo.getTax().toString();
//      String toatelS = currFmt.format(orderInfo.getToatal());

        String subtotalS = getCurrencyValue( orderInfo.getSubtotal());
        String miscChargeS = getCurrencyValue(orderInfo.getMiscCharge());
        String freightS = getCurrencyValue(orderInfo.getFreight());
        String taxS = getCurrencyValue(orderInfo.getTax());

        BigDecimal total = orderInfo.getToatal();

        BigDecimal discount = orderInfo.getDiscount();
        String discountS = null;
        if (discount != null && discount.doubleValue() != 0) {
            discountS = getCurrencyValue(discount);
            total = total.add(discount);
        }

        String toatelS = getCurrencyValue(total);


        line.append(align(normalizeString("Sub Total: ",' ',maxLenPh,LEFT)
                +normalizeString(subtotalS,' ',maxDigitinLine,LEFT),
                RIGTH));

        nextLine(sb);
        line.append(align(normalizeString("Handling: ",' ',maxLenPh,LEFT)
                +normalizeString(miscChargeS,' ',maxDigitinLine,LEFT),
                RIGTH));
        nextLine(sb);

        line.append(align(normalizeString("Estimated Freight(Standard): ",' ',maxLenPh,LEFT)
                +normalizeString(freightS,' ',maxDigitinLine,LEFT),
                RIGTH));
        nextLine(sb);

        line.append(align(normalizeString("Tax: ",' ',maxLenPh,LEFT)
                +normalizeString(taxS,' ',maxDigitinLine,LEFT),
                RIGTH));
        nextLine(sb);

        if (discountS != null) {
            line.append(align(normalizeString("Discount: ",' ',maxLenPh,LEFT)
                    +normalizeString(discountS,' ',maxDigitinLine,LEFT),
                    RIGTH));
            nextLine(sb);
        }

        line.append(align(normalizeString("Grand Total: ",' ',maxLenPh,LEFT)
                +normalizeString(toatelS,' ',maxDigitinLine,LEFT),
                RIGTH));
        nextLine(sb);
        line.append(align(getCharLine('_',maxDigitinLine+maxLenPh),LEFT));
        nextLine(sb);
    }

    public String getSubject(Object data){
      String location = "";
      String orderNumber="";
      if (data instanceof OrderInfoDataView){
        OrderInfoDataView oidv = (OrderInfoDataView)data;
        location ="-" + oidv.getOrderInfo().getOrderSiteName();//oidv.getShippingAddress().getAccountErpNum();
        orderNumber = "; Order # " + oidv.getOrderInfo().getOrderNum();
      }

      return "Orderline.xpedx.com: "+ APPROVED + location + orderNumber ;
    }


}

