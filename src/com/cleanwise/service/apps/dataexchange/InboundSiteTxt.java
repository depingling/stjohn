package com.cleanwise.service.apps.dataexchange;import com.cleanwise.service.api.util.*;import com.cleanwise.service.api.value.*;import com.cleanwise.service.api.dao.BusEntityAssocDataAccess;import com.cleanwise.service.api.dao.BusEntityDataAccess;import com.cleanwise.service.api.session.Account;import com.cleanwise.service.api.session.Site;import com.cleanwise.service.api.session.TradingPartner;import com.cleanwise.service.api.session.PropertyService;import com.cleanwise.service.api.APIAccess;import com.cleanwise.service.apps.loaders.TabFileParser;import java.io.InputStream;import java.util.*;import java.rmi.RemoteException;import java.sql.Connection;import java.sql.PreparedStatement;import org.apache.log4j.Logger;public class InboundSiteTxt extends InboundFlatFile {    protected Logger log = Logger.getLogger(InboundSiteTxt.class);    private static final String USA = "USA";    protected HashMap<String, HashMap<String, SiteTxtData>> parsedMap;    private Integer storeId;    private int parsedLineNum;    private Report report;    public InboundSiteTxt() {        this.parsedMap = new HashMap<String, HashMap<String, SiteTxtData>>();        this.parsedLineNum = 0;        this.report = new Report();    }    /**     * Called when the object has successfully been parsed     */    protected void processParsedObject(Object pParsedObject) throws Exception {        parsedLineNum++;        if (pParsedObject instanceof SiteTxtData) {            SiteTxtData txtData = (SiteTxtData) pParsedObject;            if (isValid(txtData, parsedLineNum)) {                if(!Utility.isSet(txtData.getCountry()) || USA.equals(txtData.getCountry()) ) {                    txtData.setCountry(RefCodeNames.ADDRESS_COUNTRY_CD.UNITED_STATES);                }                String custMaj = txtData.getCustomerNumber();                HashMap<String, SiteTxtData> siteMap = parsedMap.get(custMaj);                if (siteMap == null) {                    siteMap = new HashMap<String, SiteTxtData>();                }                String siteRefNumber = txtData.getLocationNumber();                siteMap.put(siteRefNumber, txtData);                parsedMap.put(custMaj, siteMap);            }        } else {            throw new Exception("Found object of wrong type: " + pParsedObject.getClass().getName());        }    }    protected boolean isValid(SiteTxtData parsedData, int line) {        boolean valid = true;        if (!Utility.isSet(parsedData.getCustomerNumber())) {            addError("Empty Customer Major Number.Line: " + line);            valid = false;        }        if (!Utility.isSet(parsedData.getLocationName())) {            addError("Empty Site Name.Line: " + line);            valid = false;        }        if (!Utility.isSet(parsedData.getLocationNumber())) {            addError("Empty Site Reference Number.Line: " + line);            valid = false;        }        if (!Utility.isSet(parsedData.getAddress1())) {            addError("Empty Address1.Line: " + line);            valid = false;        }        if (!Utility.isSet(parsedData.getZip())) {            addError("Empty Zip/Postal Code.Line: " + line);            valid = false;        }        if (!Utility.isSet(parsedData.getState())) {            addError("Empty State/Province.Line: " + line);            valid = false;        }        if (!Utility.isSet(parsedData.getCity())) {            addError("Empty City.Line: " + line);            valid = false;        }        return valid;    }    protected void addError(String s) {        log.info("addError => s = "+s);        appendErrorMsgs(s);    }    public void translate(InputStream pIn, String pStreamType) throws Exception {        long startTime = System.currentTimeMillis();        log.info("translate => BEGIN.");        try {            doPreProcessing();            TabFileParser parser = new TabFileParser();            parser.parse(pIn);            parser.cleanUpResult();            parser.processParsedStrings(this);            doPostProcessing();            doErrorProcessing();        } catch (Exception e) {            log.info("translate => FAILED.Process time at : " + (System.currentTimeMillis() - startTime) + " ms");            e.printStackTrace();            setFail(true);            throw e;        }        Report report = getReport();        log.info("translate => report: " + report);        log.info("translate => END.Process time at : " + (System.currentTimeMillis() - startTime) + " ms");    }    private void doErrorProcessing() throws Exception {        Vector errors = getErrorMsgs();        log.info("doErrorProcessing errors: errors=" + errors.toString());        if (errors.size() > 0) {            log.info("doErrorProcessing errors:" + getFormatedErrorMsgs());            String errorMessage = "Errors:" + getFormatedErrorMsgs();            throw new Exception(errorMessage);        }    }    protected void doPostProcessing() throws Exception {        log.info("doPostProcessing => BEGIN.");        log.info("doPostProcessing => parsedMap.size:" + parsedMap.size());        Site siteEjb = APIAccess.getAPIAccess().getSiteAPI();        Account accountEjb = APIAccess.getAPIAccess().getAccountAPI();        PropertyService propertyEjb = APIAccess.getAPIAccess().getPropertyServiceAPI();        Report report = getReport();        Integer storeId = getStoreId();        HashSet<NscSiteView> siteForUpdates = new HashSet<NscSiteView>();        HashSet<NscSiteView> siteForRemoves = new HashSet<NscSiteView>();        HashSet<NscSiteView> siteForAdds = new HashSet<NscSiteView>();        Set<String> custMajsSet = getAllCustMajs();        IdVector accountIds = new IdVector();        for (String custMaj : custMajsSet) {            try {                siteForUpdates.clear();                siteForRemoves.clear();                siteForAdds.clear();                int accountId = getAccountIdByCustmaj(storeId,accountEjb, custMaj).intValue();                if (accountId==0){                	addError("No accounts found with  Customer Number: '" + custMaj + "'.");                	continue;                }                accountIds.add(accountId);                NscSiteViewVector allSites = siteEjb.getAllNscSites(accountId, custMaj);                HashMap<String, SiteTxtData> inboundSiteMap = getInboundSiteMap(custMaj);                HashSet siteRefNumHS = new HashSet();                for (Object oSite : allSites) {                    NscSiteView sysSite = (NscSiteView) oSite;                    String siteRefNum = sysSite.getSiteReferenceNumber();                    if (Utility.isSet(siteRefNum)) {                        if(siteRefNumHS.contains(siteRefNum)) {                            continue;                        }                        siteRefNumHS.add(siteRefNum);                        SiteTxtData inboundSite = inboundSiteMap.remove(sysSite.getSiteReferenceNumber());                        if (inboundSite != null) {                            if (setChanges(inboundSite, sysSite)) {                                siteForUpdates.add(sysSite);                                report.setUpdated(report.getUpdated() + 1);                            } else {                                report.setNotchanged(report.getNotchanged() + 1);                            }                        } else {                            if (!RefCodeNames.BUS_ENTITY_STATUS_CD.INACTIVE.equals(sysSite.getStatus())) {                                siteForRemoves.add(sysSite);                                report.setRemoved(report.getRemoved() + 1);                            }                        }                    }                }                siteForAdds.addAll(createNscSiteCollection(accountId, custMaj, inboundSiteMap.values()));                report.setAdded(siteForAdds.size());                removeSites(siteEjb, siteForRemoves);                updateSites(siteEjb, siteForUpdates);                addSites(siteEjb, siteForAdds);            } catch (Exception e) {                e.printStackTrace();                addError(e.getMessage());            }        }                setAccountsInactiveIfNotReceoved(storeId, accountIds, siteEjb);        log.info("doPostProcessing => END.");    }    private void setAccountsInactiveIfNotReceoved(Integer storeId, IdVector accountIdsInFile, Site siteEjb) throws Exception {    	Connection conn = null;    	IdVector accountIdInDB = new IdVector();    	java.util.Date now = new java.util.Date();    	String updateSites = "update clw_bus_entity " +    			"set bus_entity_status_cd = ?, mod_by = ?, mod_date = ? " +				"where bus_entity_id in ( " +				"  select bus_entity1_id from clw_bus_entity_assoc " +				"  where bus_entity2_id = ?  " +				"  and bus_entity_assoc_cd = '" + RefCodeNames.BUS_ENTITY_ASSOC_CD.SITE_ACCOUNT + "') " +				"and bus_entity_status_cd = '" + RefCodeNames.BUS_ENTITY_STATUS_CD.ACTIVE + "'";    	    	    	try{    		conn = getConnection();      		PreparedStatement pstmt = conn.prepareStatement(updateSites);    		    		DBCriteria crit = new DBCriteria();    		crit.addEqualTo(BusEntityAssocDataAccess.BUS_ENTITY2_ID, storeId);    		crit.addEqualTo(BusEntityAssocDataAccess.BUS_ENTITY_ASSOC_CD, RefCodeNames.BUS_ENTITY_ASSOC_CD.ACCOUNT_STORE);    		String subSql = BusEntityAssocDataAccess.getSqlSelectIdOnly(BusEntityAssocDataAccess.BUS_ENTITY1_ID, crit);    		crit = new DBCriteria();    		crit.addEqualTo(BusEntityDataAccess.BUS_ENTITY_STATUS_CD, RefCodeNames.BUS_ENTITY_STATUS_CD.ACTIVE);    		crit.addOneOf(BusEntityDataAccess.BUS_ENTITY_ID, subSql);    		accountIdInDB = BusEntityDataAccess.selectIdOnly(conn, BusEntityDataAccess.BUS_ENTITY_ID, crit);    		accountIdInDB.removeAll(accountIdsInFile);    		if (!accountIdInDB.isEmpty()){    			for (Iterator acctIdIter = accountIdInDB.iterator(); acctIdIter.hasNext(); ){    				Integer accountId = (Integer) acctIdIter.next();    				pstmt.setString(1, RefCodeNames.BUS_ENTITY_STATUS_CD.INACTIVE);    				pstmt.setString(2, getModBy());    				pstmt.setTimestamp(3, DBAccess.toSQLTimestamp(now));    				pstmt.setInt(4, accountId);    				pstmt.addBatch();    			}    			pstmt.executeBatch();    			pstmt.close();    			    			String updateAccounts = "update clw_bus_entity " +    			"set bus_entity_status_cd = ?, mod_by = ?, mod_date = ? " +    			"where " + Utility.toSqlInClause("bus_entity_id",accountIdInDB);    			pstmt = conn.prepareStatement(updateAccounts);    			pstmt.setString(1, RefCodeNames.BUS_ENTITY_STATUS_CD.INACTIVE);				pstmt.setString(2, getModBy());				pstmt.setTimestamp(3, DBAccess.toSQLTimestamp(now));				pstmt.executeQuery();    			pstmt.close();    		}    	}finally{    		closeConnection(conn);    	}    	    }	protected Integer getAccountIdByCustmaj(Integer storeId,Account accountEjb, String custMaj) {        List<Integer> accountIds = null;        try {        	BusEntitySearchCriteria bcrit = new BusEntitySearchCriteria();        	IdVector storeIds = new IdVector();        	storeIds.add(storeId);        	bcrit.setStoreBusEntityIds(storeIds);        	bcrit.addPropertyCriteria(RefCodeNames.PROPERTY_TYPE_CD.CUST_MAJ, custMaj);        	accountIds = Utility.toIdVector(accountEjb.getAccountBusEntByCriteria(bcrit));        	//accountIds = propertyEjb.getBusEntityVector(             //   RefCodeNames.PROPERTY_TYPE_CD.CUST_MAJ, custMaj);        } catch (RemoteException ex) {            log.error("Remote Exception occured during getting account ids by CUST_MAJ", ex);        }        if (accountIds == null || accountIds.size() < 1) {        	if (log.isInfoEnabled()) {                log.info("No accounts found with CUST_MAJ: '" + custMaj + "'.");            }        	            return new Integer(0);        }        return accountIds.get(0);    }    protected void addSites(Site siteEjb, HashSet<NscSiteView> nscSites) throws RemoteException {        updateSites(siteEjb, nscSites);    }    protected void updateSites(Site siteEjb, HashSet<NscSiteView> nscSites) throws RemoteException {        NscSiteViewVector nscSiteVV = new NscSiteViewVector();        for (NscSiteView nscSite : nscSites) {            nscSite.setStatus(RefCodeNames.BUS_ENTITY_STATUS_CD.ACTIVE);            nscSiteVV.add(nscSite);        }        siteEjb.updateNscSites(nscSiteVV, getModBy());    }    protected void removeSites(Site siteEjb, HashSet<NscSiteView> nscSites) throws RemoteException {        NscSiteViewVector nscSiteVV = new NscSiteViewVector();        for (NscSiteView nscSite : nscSites) {            nscSite.setStatus(RefCodeNames.BUS_ENTITY_STATUS_CD.INACTIVE);            nscSiteVV.add(nscSite);        }        siteEjb.updateNscSites(nscSiteVV, getModBy());    }    protected NscSiteViewVector createNscSiteCollection(int accountId, String custMaj, Collection<SiteTxtData> siteTxtDatas) {        NscSiteViewVector v = new NscSiteViewVector();        for (SiteTxtData siteTxtData : siteTxtDatas) {            v.add(createNscSite(accountId, custMaj, siteTxtData));        }        return v;    }    protected NscSiteView createNscSite(int accountId, String custMaj, SiteTxtData siteTxtData) {        NscSiteView nscSite = NscSiteView.createValue();        nscSite.setSiteReferenceNumber(siteTxtData.getLocationNumber());        nscSite.setSiteName(siteTxtData.getLocationName());        nscSite.setAccountId(accountId);        nscSite.setCustMaj(custMaj);        AddressData address = AddressData.createValue();        address.setName1("N/A");        address.setName2("N/A");        address.setAddress1(siteTxtData.getAddress1());        address.setAddress2(siteTxtData.getAddress2());        address.setCity(siteTxtData.getCity());        address.setStateProvinceCd(siteTxtData.getState());        address.setPostalCode(siteTxtData.getZip());        address.setCountryCd(siteTxtData.getCountry());        address.setPrimaryInd(true);        address.setAddressTypeCd(RefCodeNames.ADDRESS_TYPE_CD.SHIPPING);        address.setAddressStatusCd(RefCodeNames.ADDRESS_STATUS_CD.ACTIVE);        nscSite.setAddress(address);        return nscSite;    }    protected boolean setChanges(SiteTxtData inboundSite, NscSiteView sysSite) {        boolean changed = false;        if (!strNN(inboundSite.getLocationNumber()).equals(strNN(sysSite.getSiteReferenceNumber()))) {            sysSite.setSiteReferenceNumber(inboundSite.getLocationNumber());            changed = true;        }        if (!strNN(inboundSite.getLocationName()).equals(strNN(sysSite.getSiteName()))) {            sysSite.setSiteName(inboundSite.getLocationName());            changed = true;        }        if (!strNN(inboundSite.getAddress1()).equals(strNN(sysSite.getAddress().getAddress1()))) {            sysSite.getAddress().setAddress1(inboundSite.getAddress1());            changed = true;        }        if (!strNN(inboundSite.getAddress2()).equals(strNN(sysSite.getAddress().getAddress2()))) {            sysSite.getAddress().setAddress2(inboundSite.getAddress2());            changed = true;        }        if (!strNN(inboundSite.getAddress3()).equals(strNN(sysSite.getAddress().getAddress3()))) {            sysSite.getAddress().setAddress3(inboundSite.getAddress3());            changed = true;        }        if (!strNN(inboundSite.getAddress4()).equals(strNN(sysSite.getAddress().getAddress4()))) {            sysSite.getAddress().setAddress4(inboundSite.getAddress4());            changed = true;        }        if (!strNN(inboundSite.getCity()).equals(strNN(sysSite.getAddress().getCity()))) {            sysSite.getAddress().setCity(inboundSite.getCity());            changed = true;        }        if (!strNN(inboundSite.getCountry()).equals(strNN(sysSite.getAddress().getCountryCd()))) {            sysSite.getAddress().setCountryCd(inboundSite.getCountry());            changed = true;        }        if (!strNN(inboundSite.getState()).equals(strNN(sysSite.getAddress().getStateProvinceCd()))) {            sysSite.getAddress().setStateProvinceCd(inboundSite.getState());            changed = true;        }        if (!strNN(inboundSite.getZip()).equals(sysSite.getAddress().getPostalCode())) {            sysSite.getAddress().setPostalCode(inboundSite.getZip());            changed = true;        }        if(RefCodeNames.BUS_ENTITY_STATUS_CD.INACTIVE.equals(sysSite.getStatus())){            sysSite.setStatus(RefCodeNames.BUS_ENTITY_STATUS_CD.ACTIVE);            changed = true;        }        return changed;    }    protected String strNN(String val) {        return Utility.strNN(val);    }    protected HashMap<String, SiteTxtData> getInboundSiteMap(String custMaj) {        log.info("getInboundSiteMap => parsedMap.size:" + parsedMap.size());        HashMap<String, SiteTxtData> siteMap = parsedMap.get(custMaj);        if (siteMap == null) {            return new HashMap<String, SiteTxtData>();        } else {            return (HashMap)siteMap.clone();        }    }    protected Set<String> getAllCustMajs() {        return parsedMap.keySet();    }    private void doPreProcessing() throws Exception {        storeId = getStoreId();        log.info("doPreProcessing => Store Id: " + storeId);    }    public Integer getStoreId() throws Exception {        TradingPartner partnerEjb = APIAccess.getAPIAccess().getTradingPartnerAPI();        TradingPartnerData partner = translator.getPartner();        if (partner == null) {            throw new IllegalArgumentException("Trading Partner ID cann't be determined");        }        HashMap assocMap = partnerEjb.getMapTradingPartnerAssocIds(partner.getTradingPartnerId());        IdVector storeIds = (IdVector) assocMap.get(RefCodeNames.BUS_ENTITY_TYPE_CD.STORE);        if (storeIds == null || storeIds.isEmpty()) {            throw new IllegalArgumentException("Trading partner is not associated with any store. " +                    "Trading parther id: " +                    partner.getTradingPartnerId());        }        if (storeIds.size() > 1) {            throw new IllegalArgumentException("Trading partner associated with multiple stores. " +                    "Trading parther id: " +                    partner.getTradingPartnerId());        }        return (Integer) storeIds.get(0);    }    public class Report {        int added      = 0;        int removed    = 0;        int updated    = 0;        int notchanged = 0;        public int getAdded() {            return added;        }        public void setAdded(int added) {            this.added = added;        }        public int getRemoved() {            return removed;        }        public void setRemoved(int removed) {            this.removed = removed;        }        public int getUpdated() {            return updated;        }        public void setUpdated(int updated) {            this.updated = updated;        }        public int getNotchanged() {            return notchanged;        }        public void setNotchanged(int notchanged) {            this.notchanged = notchanged;        }        public String toString() {            return  "Not changed:" + notchanged + ", " +                    "Updated: " + updated + ", " + "Removed:" + removed + ", " + "Added:" + added;        }    }    public Report getReport() {        return report;    }    public void setReport(Report report) {        this.report = report;    }    protected String getModBy() {        return "InboundSiteTxt";    }}